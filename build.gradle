/*
 * Copyright 2016 Layne Mobile, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext {
    sourceCompatibility = JavaVersion.VERSION_1_7
    LICENSES = ['Apache-2.0']
    LABELS = ['java', 'sourcerer', 'extensions']
}

buildscript {
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${appGradleBintrayPluginVersion}"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${appGradleBuildInfoExtractorVersion}"
        classpath "com.neenbedankt.gradle.plugins:android-apt:${appGradleAptVersion}"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:${appGradleNebulaVersion}"
        classpath "com.squareup:javapoet:${appJavaPoetGradleVersion}"
        classpath "com.squareup.okio:okio:${appOkioVersion}"
    }
}

apply from: "${rootDir}/gradle/artifactory.gradle"

// brittle but works
def isReleaseBuild = gradle.startParameter.taskNames.contains('bintrayUpload')
allprojects {
    group = GROUP
    version = isReleaseBuild ? VERSION_NAME : "$VERSION_NAME-SNAPSHOT"
    logger.info("Project ${it.name} using version=${it.version}")
}

subprojects {
    repositories {
        jcenter()
        mavenLocal()
    }

    configurations {
        testCompile
    }

    dependencies {
        // testing
        testCompile "junit:junit:${appJunitVersion}"
        testCompile "org.mockito:mockito-core:${appMockitoVersion}"
    }
}
